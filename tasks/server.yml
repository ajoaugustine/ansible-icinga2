---
## https://www.icinga.org/icinga/icinga-2/
## https://github.com/Icinga/icingaweb2/blob/master/doc/installation.md
## http://lowendbox.com/blog/server-monitoring-with-icinga-2-part-1-the-server-ubuntu-host/
## http://serverfault.com/questions/730214/how-to-set-up-icinga2-master-for-remote-clients-without-using-cli-wizard

- include: server-debian.yml
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- include: server-redhat.yml
  when: ansible_os_family == "RedHat" or ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: check role user exists
  user: "name={{ icinga2_user }} home={{ icinga2_rootdir }}"
  become: yes

- name: collecting currently enabled icinga2 features
  shell: icinga2 feature list | grep Enabled
  register: featurelist
  changed_when: False
  tags:
    - configure
#- debug: var=featurelist
- name: Enable features in Icinga2
  command: icinga2 feature enable {{ item }}
  with_items:
    - perfdata
    - livestatus
    - ido-mysql
  notify:
    - restart icinga2
#  when: featurelist.stdout.find("perfdata") != -1  # execute always
  when: featurelist is defined and featurelist.stdout.find("perfdata") == -1
  tags:
    - configure
- name: Enable api feature in Icinga2
  command: icinga2 feature enable {{ item }}
  with_items:
    - api
  notify:
    - restart icinga2
  when: featurelist.stdout.find("api") == -1 and icinga2_api is defined and icinga2_api
  tags:
    - configure
- name: add bind_host for api
  lineinfile: dest=/etc/icinga2/features-available/api.conf regexp='^  bind_host = ' line='  bind_host = "{{ icinga2_server_ip }}"' insertafter='ca_path'
  when: icinga2_api is defined and icinga2_api
  tags:
    - configure

#- group: name=icingaweb2 state=present
#  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
### FIXME! umask git repo ?? https://github.com/ansible/ansible/pull/10504
#- stat: path=/usr/share/icingaweb2
#  register: icingaweb2dir
#- name: Icinga2 Web UI git clone
#  git:
#    repo=https://github.com/Icinga/icingaweb2.git
#    dest=/usr/share/icingaweb2
#  when: not icingaweb2dir.stat.exists
#
#- shell: "/usr/share/icingaweb2/bin/icingacli setup config webserver apache --document-root /usr/share/icingaweb2/public | tee {{ icinga2_apacheconf }}/icingaweb2.conf"
#- command: /usr/share/icingaweb2/bin/icingacli setup config directory
- stat: path=/root/.icingaweb2_token
  register: tokenfile
#- shell: "/usr/share/icingaweb2/bin/icingacli setup token create | tee /root/.icingaweb2_token"
- shell: "icingacli setup token create | tee /root/.icingaweb2_token"
  register: token
  when: not tokenfile.stat.exists
- debug: var=token
  when: not tokenfile.stat.exists

- file: path=/var/log/icingaweb2 state=directory mode=0755 owner="{{ www_user }}"
- file: path=/etc/icingaweb2 state=directory mode=0755 owner="{{ www_user }}"
- file: path=/etc/icingaweb2/enabledModules state=directory mode=0755 owner="{{ www_user }}"
- file: path=/etc/icingaweb2/modules state=directory mode=0755 owner="{{ www_user }}"
- file: path=/etc/icingaweb2/modules/monitoring state=directory mode=0755 owner="{{ www_user }}"
- file: path=/etc/icingaweb2/monitoring state=directory mode=0755 owner="{{ www_user }}"
#- htpasswd: path=/usr/share/icingaweb2/public/.htpass name={{ icinga2_webuser }} password={{ icinga2_webpass }} owner=root group="{{ www_user }}" mode=0640
#  when: webuser is defined and webpass is defined
#- copy: src=icingaweb2-htaccess.conf dest={{ icinga2_apacheconf }}/icingaweb2-htaccess.conf mode=0644
#
#
#- command: chown -R root:icingaweb2 /etc/icingaweb2

- user: name="{{ www_user }}" groups=icingaweb2 append=yes

- name: ensure right permissions for modsecurity active rules dir
  file: dest="{{ modsecurity_active }}" state=directory mode=0755
- name: add icinga2 exceptions to modsecurity
  copy: src=modsecurity_crs_90_exceptions_icinga2.conf dest="{{ modsecurity_active }}/modsecurity_crs_90_exceptions_icinga2.conf" mode=0644

- name: add custom commands to icinga2
  copy: src=commands-custom.conf dest=/etc/icinga2/conf.d/commands-custom.conf mode=0644
  notify:
    - restart icinga2
  tags:
    - configure
- name: add manubulon snmp commands to icinga2
  file: src=/usr/share/icinga2/include/command-plugins-manubulon.conf dest=/etc/icinga2/conf.d/command-plugins-manubulon.conf state=link
  notify:
    - restart icinga2
  tags:
    - configure

- name: generate a salt with openssl
  shell: "openssl rand -base64 32 | sed 's@[=\\/\\+]@@g;'"
  changed_when: False
  register: salt
  tags:
    - configure
- name: Create salt for pki ticket when registering node
  replace: dest=/etc/icinga2/constants.conf regexp='{{ item.regexp }}' replace='{{ item.replace }}'
  with_items:
    - { regexp: '^const TicketSalt = ""', replace: 'const TicketSalt = "{{ salt.stdout }}"' }
    - { regexp: '^//const NodeName = "localhost"', replace: 'const NodeName = "{{ ansible_fqdn }}"' }
  notify:
    - restart icinga2
  tags:
    - configure

## conflict with command: icinga2 pki new-ca = Error: stdout: critical/cli: CA directory '/var/lib/icinga2/ca' already exists.
#- file: dest=/var/lib/icinga2/ca state=directory mode=0755 owner=nagios group=nagios
- file: dest={{ icinga2_pki_dir }} state=directory mode=0755 owner="{{ icinga2_pki_userdir }}" group="{{ icinga2_pki_userdir }}"
- stat: path=/var/lib/icinga2/ca/ca.crt
  register: cafile
  tags:
    - configure
- name: configure pki
  command: "{{ item }}"
  with_items:
#    - "icinga2 pki new-cert --cn {{ ansible_fqdn }} --key /var/lib/icinga2/ca/ca.key --cert /var/lib/icinga2/ca/ca.crt"
    - "icinga2 pki new-ca"
    - "icinga2 pki new-cert --cn {{ ansible_fqdn }} --key {{ icinga2_pki_dir }}/{{ ansible_fqdn }}.key --csr {{ icinga2_pki_dir }}/{{ ansible_fqdn }}.csr"
    - "icinga2 pki sign-csr --csr {{ icinga2_pki_dir }}/{{ ansible_fqdn }}.csr --cert {{ icinga2_pki_dir }}/{{ ansible_fqdn }}.crt"
  when: not cafile.stat.exists
  tags:
    - configure

- command: "rsync -ci /var/lib/icinga2/ca/{{ item }} /etc/icinga2/pki/{{ item }}"
  with_items:
    - ca.crt
  register: rsync_result
  changed_when: 'rsync_result.stdout != ""'
  tags:
    - configure

- include: vim-syntax.yml

- name: remove default example of satellites
  file: path=/etc/icinga2/conf.d/satellite.conf state=absent
- name: configure zones
  template: src=zones.conf.j2 dest="/etc/icinga2/zones.conf" mode=0644 backup=yes
- name: configure local hosts file
  template: src=hosts.conf.j2 dest="/etc/icinga2/conf.d/hosts.conf" mode=0644 backup=yes
- name: configure mysql root config for backup
  template: src=my.cnf.j2 dest=/root/.my.cnf mode=0400

- file: path={{ scriptsdir }} state=directory mode=0755
- name: add backup script
  template: src=backup-icinga2.sh.j2 dest={{ scriptsdir }}/backup-icinga2.sh mode=0755
- name: add restore script
  template: src=restore-icinga2.sh.j2 dest={{ scriptsdir }}/restore-icinga2.sh mode=0755

- name: configure backup script 2/m with cron - debian
  cron: name="icinga2 backup" minute=0 hour=23 day="2,16"
    user=root job="{{ scriptsdir }}/backup-icinga2.sh"
    cron_file=ansible_icinga2backup
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
- name: configure backup script 2/m with cron - redhat
  cron: name="icinga2 backup" minute=0 hour=23 day="2,16"
    user=root job="{{ scriptsdir }}/backup-icinga2.sh"
  when: ansible_os_family == "RedHat" or ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

### restore existing backup ?
### failed: [158.69.212.202 -> 127.0.0.1] => {"failed": true, "parsed": false}
### [sudo via ansible, key=bpnjqugecgiwedfhzjjozeuxttscxgas] password: 
#- local_action: stat path=backup-icinga2.tar.gz
##- stat: path=backup-icinga2.tar.gz
#  register: localbackup
##  sudo: no
##  delegate_to: localhost
#- stat: path=/root/.ansible_restore_icinga2backup
#  register: restored
#- copy: src=backup-icinga2.tar.gz dest={{ backupdir }}/backup-icinga2.tar.gz
#  when: localbackup.stat.exists and not restored.stat.exists
#- command: "{{ scriptsdir }}/restore-icinga2.sh"
#  when: localbackup.stat.exists and not restored.stat.exists
#- file: dest=/root/.ansible_restore_icinga2backup state=touch
#  when: localbackup.stat.exists and not restored.stat.exists

- block:
    - name: copy extra icinga2 config
      copy: "src={{ item }} dest=/etc/icinga2/conf.d/ mode=0644"
      with_items: "{{ icinga2_extra_conf_files }}"
      notify:
        - restart icinga2
  when: icinga2_extra_conf_files is defined and icinga2_extra_conf_files != ""

- debug: msg="End configuration by connecting on http://{{ ansible_fqdn}} and entering token {{ token }}"
  when: not tokenfile.stat.exists
- debug: var=ansible_fqdn
  when: not tokenfile.stat.exists
- debug: var=token
  when: not tokenfile.stat.exists

## Note: ensure icinga2 bind ip (icingaserver_ip) is correct else icinga2 start/restart will stalled
- name: Ensure services are started
  service: name="{{ item }}" state=started
  with_items:
    - icinga2
    - "{{ apache_svc }}"
    - "{{ mysql_svc }}"

- include: plugins.yml

## Web wizard tasks, https://github.com/Icinga/icingaweb2/blob/master/doc/installation.md

- name: create icingaweb2 mysql user
  mysql_user: "name={{ icinga2_mysqlwebuser }} password={{ icinga2_mysqlwebpass }} priv='{{ icinga2_mysqlwebdb }}.*:SELECT,INSERT,UPDATE,DELETE,DROP,CREATE VIEW,INDEX,EXECUTE' state=present login_user=root login_password={{ icinga2_mysqlrootpw }}"
- name: create icingaweb2 mysql db
  mysql_db: name="{{ icinga2_mysqlwebdb }}" login_user=root login_password="{{ icinga2_mysqlrootpw }}"
- name: import template in icingaweb2 mysql db
  mysql_db: name="{{ icinga2_mysqlwebdb }}" state=import target=/usr/share/icingaweb2/etc/schema/mysql.schema.sql login_user=root login_password="{{ icinga2_mysqlrootpw }}"
  ignore_errors: true
- name: set icingaweb2 config
  template: "src={{ item.s }} dest={{ item.d }} mode=0664 owner={{ www_user }} group={{ www_user }} backup=yes"
  with_items:
    - { s: 'icingaweb2-config.ini.j2', d: '/etc/icingaweb2/config.ini' }
    - { s: 'icingaweb2-resources.ini.j2', d: '/etc/icingaweb2/resources.ini' }
    - { s: 'icingaweb2-authentication.ini.j2', d: '/etc/icingaweb2/authentication.ini' }
    - { s: 'icingaweb2-roles.ini.j2', d: '/etc/icingaweb2/roles.ini' }
    - { s: 'icingaweb2-config-monitoring.ini.j2', d: '/etc/icingaweb2/modules/monitoring/config.ini' }
    - { s: 'icingaweb2-backends.ini.j2', d: '/etc/icingaweb2/modules/monitoring/backends.ini' }
    - { s: 'icingaweb2-commandtransports.ini.j2', d: '/etc/icingaweb2/modules/monitoring/commandtransports.ini' }
# groups.ini?
- name: adding monitoring module to icingaweb2
  file: src=/usr/share/icingaweb2/modules/monitoring dest=/etc/icingaweb2/enabledModules/monitoring state=link

- include: pnp4nagios.yml
  when: chart_module is defined and chart_module == 'pnp4nagios'
  tags:
    - pnp4nagios

- include: graphite.yml
  when: chart_module is defined and chart_module == 'graphite'
  tags:
    - graphite

- include: nagvis.yml
  tags:
    - nagvis

- name: adding nagvis module to icingaweb2
  file: src=/usr/share/icingaweb2/modules/nagvis dest=/etc/icingaweb2/enabledModules/nagvis state=link
- name: adding pnp4nagios module to icingaweb2
  file: src=/usr/share/icingaweb2/modules/pnp4nagios dest=/etc/icingaweb2/enabledModules/pnp4nagios state=link
  when: chart_module is defined and chart_module == 'pnp4nagios'
  tags:
    - pnp4nagios
#  when: chart_module is defined and chart_module == 'graphite'


